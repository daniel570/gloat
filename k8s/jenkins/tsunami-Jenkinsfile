pipeline {
    agent any
    stages {
        
    stage("clean workspace")
    {
        steps {
            cleanWs()
        }
    }
        
    stage("checkout from SCM")
    {
        steps {
          sh "git clone --branch master https://github.com/daniel570/gloat.git"   
          
        }
    }

    stage("run tsunami scanner job")
    {
        steps {
            sh "cd gloat/k8s; kubectl apply -f tsunami_job.yaml; sleep 10"
        }
    }

    stage("get job id and delete it after execution")
    {
        steps {
            sh '''pods=$(kubectl get pods --selector=job-name=tsunami-scanner --output=jsonpath='{.items[*].metadata.name}'); echo $pods
            kubectl logs $pods > report.txt; kubectl delete job tsunami-scanner
            '''

        }
    }

    }
    post {
        always {
            script {
                currentBuild.result = currentBuild.result ?: 'SUCCESS'
                emailNotification()
                }
        }
    }
}

def emailNotification() {
    body = "Hi Your Build ${env.JOB_NAME} #${env.BUILD_NUMBER} " +
            "with ${currentBuild.result}:\n" +
            "Branch: ${env.BRANCH_NAME}\n" +
            "See report.txt file attached for details\n"
            "The Devops team"
    subject = "Build ${env.JOB_NAME} #${env.BUILD_NUMBER} ${currentBuild.result}"
    cc = "danielharsheffer@gmail.com"
    sendEmail(subject, body, cc)
}

def sendEmail(subject, body, cc) {
    emailext (
            subject: subject,
            recipientProviders: [developers()],
            attachmentsPattern: 'report.txt',
            body: body,
            to: cc
    )
}

